{"lib/events.js":[{"tags":[],"description":{"full":"<p>EventEmitter<br />Copyright (c) 2011 TJ Holowaychuk &lt;<a href='mailto:tj@vision-media.ca'>tj@vision-media.ca</a>&gt;<br />MIT Licensed</p>","summary":"<p>EventEmitter<br />Copyright (c) 2011 TJ Holowaychuk &lt;<a href='mailto:tj@vision-media.ca'>tj@vision-media.ca</a>&gt;<br />MIT Licensed</p>","body":""},"ignore":true,"code":"// TODO: own library, since tons of my libs use this :D"},{"tags":[],"description":{"full":"<p>Slice reference.</p>","summary":"<p>Slice reference.</p>","body":""},"ignore":false,"code":"var slice = [].slice;","ctx":{"type":"declaration","name":"slice","value":"[].slice","string":"slice"}},{"tags":[],"description":{"full":"<p>EventEmitter.</p>","summary":"<p>EventEmitter.</p>","body":""},"ignore":false,"code":"function EventEmitter() {\n  this.callbacks = {};\n};","ctx":{"type":"function","name":"EventEmitter","string":"EventEmitter()"}},{"tags":[{"type":"param","types":["String"],"name":"event","description":""},{"type":"param","types":["Function"],"name":"fn","description":""}],"description":{"full":"<p>Listen on the given <code>event</code> with <code>fn</code>.</p>","summary":"<p>Listen on the given <code>event</code> with <code>fn</code>.</p>","body":""},"isPrivate":false,"ignore":false,"code":"EventEmitter.prototype.on = function(event, fn){\n  (this.callbacks[event] = this.callbacks[event] || [])\n    .push(fn);\n  return this;\n};","ctx":{"type":"method","constructor":"EventEmitter","name":"on","string":"EventEmitter.prototype.on()"}},{"tags":[{"type":"param","types":["String"],"name":"event","description":""},{"type":"param","types":["Mixed"],"name":"...","description":""}],"description":{"full":"<p>Emit <code>event</code> with the given args.</p>","summary":"<p>Emit <code>event</code> with the given args.</p>","body":""},"isPrivate":false,"ignore":false,"code":"EventEmitter.prototype.emit = function(event){\n  var args = slice.call(arguments, 1)\n    , callbacks = this.callbacks[event];\n\n  if (callbacks) {\n    for (var i = 0, len = callbacks.length; i < len; ++i) {\n      callbacks[i](args);\n    }\n  }\n\n  return this;\n};","ctx":{"type":"method","constructor":"EventEmitter","name":"emit","string":"EventEmitter.prototype.emit()"}}],"lib/superagent.js":[{"tags":[],"description":{"full":"<p>superagent<br />Copyright (c) 2010 TJ Holowaychuk &lt;<a href='mailto:tj@vision-media.ca'>tj@vision-media.ca</a>&gt;<br />MIT Licensed</p>","summary":"<p>superagent<br />Copyright (c) 2010 TJ Holowaychuk &lt;<a href='mailto:tj@vision-media.ca'>tj@vision-media.ca</a>&gt;<br />MIT Licensed</p>","body":""},"ignore":true,"code":"var superagent = function(exports){","ctx":{"type":"function","name":"superagent","string":"superagent()"}},{"tags":[],"description":{"full":"<p>Expose the request function.</p>","summary":"<p>Expose the request function.</p>","body":""},"ignore":false,"code":"exports = request;"},{"tags":[],"description":{"full":"<p>Noop.</p>","summary":"<p>Noop.</p>","body":""},"ignore":false,"code":"var noop = function(){};","ctx":{"type":"function","name":"noop","string":"noop()"}},{"tags":[],"description":{"full":"<p>Determine XHR.</p>","summary":"<p>Determine XHR.</p>","body":""},"ignore":false,"code":"var getXHR = 'XMLHttpRequest' in this\n    ? function(){ return new XMLHttpRequest }\n    : function(){ return new ActiveXObject('Microsoft.XMLHTTP') };","ctx":{"type":"declaration","name":"getXHR","value":"'XMLHttpRequest' in this","string":"getXHR"}},{"tags":[{"type":"param","types":["Mixed"],"name":"obj","description":""},{"type":"return","types":["Boolean"],"description":""},{"type":"api","visibility":"private"}],"description":{"full":"<p>Check if <code>obj</code> is a function.</p>","summary":"<p>Check if <code>obj</code> is a function.</p>","body":""},"isPrivate":true,"ignore":false,"code":"function isFunction(obj) {\n   return obj && obj.call && obj.apply;\n  }","ctx":{"type":"function","name":"isFunction","string":"isFunction()"}},{"tags":[{"type":"param","types":["Object"],"name":"obj","description":""},{"type":"return","types":["Boolean"],"description":""},{"type":"api","visibility":"private"}],"description":{"full":"<p>Check if <code>obj</code> is an object.</p>","summary":"<p>Check if <code>obj</code> is an object.</p>","body":""},"isPrivate":true,"ignore":false,"code":"function isObject(obj) {\n    var cons = obj.constructor;\n    return cons && 'Object' == cons.name;\n  }","ctx":{"type":"function","name":"isObject","string":"isObject()"}},{"tags":[{"type":"param","types":["Object"],"name":"obj","description":""},{"type":"return","types":["String"],"description":""},{"type":"api","visibility":"private"}],"description":{"full":"<p>Serialize the given <code>obj</code>.</p>","summary":"<p>Serialize the given <code>obj</code>.</p>","body":""},"isPrivate":true,"ignore":false,"code":"function serialize(obj) {\n    if (!isObject(obj)) return obj;\n    var pairs = [];\n    for (var key in obj) {\n      pairs.push(encodeURIComponent(key)\n        + '=' + encodeURIComponent(obj[key]));\n    }\n    return pairs.join('&');\n  }","ctx":{"type":"function","name":"serialize","string":"serialize()"}},{"tags":[],"description":{"full":"<p>Expose serialization method.</p>","summary":"<p>Expose serialization method.</p>","body":""},"ignore":false,"code":"exports.serializeObject = serialize;","ctx":{"type":"property","receiver":"exports","name":"serializeObject","value":"serialize","string":"exports.serializeObject"}},{"tags":[{"type":"param","types":["String"],"name":"str","description":""},{"type":"return","types":["Object"],"description":""},{"type":"api","visibility":"private"}],"description":{"full":"<p>Parse the given x-www-form-urlencoded <code>str</code>.</p>","summary":"<p>Parse the given x-www-form-urlencoded <code>str</code>.</p>","body":""},"isPrivate":true,"ignore":false,"code":"function parseString(str) {\n    var obj = {}\n      , pairs = str.split('&')\n      , parts\n      , pair;\n\n    for (var i = 0, len = pairs.length; i < len; ++i) {\n      pair = pairs[i];\n      parts = pair.split('=');\n      obj[decodeURIComponent(parts[0])] = decodeURIComponent(parts[1]);\n    }\n\n    return obj;\n  }","ctx":{"type":"function","name":"parseString","string":"parseString()"}},{"tags":[],"description":{"full":"<p>Expose parser.</p>","summary":"<p>Expose parser.</p>","body":""},"ignore":false,"code":"exports.parseString = parseString;","ctx":{"type":"property","receiver":"exports","name":"parseString","value":"parseString","string":"exports.parseString"}},{"tags":[],"description":{"full":"<p>Default MIME type map.</p>","summary":"<p>Default MIME type map.</p>","body":""},"ignore":false,"code":"exports.types = {\n      html: 'text/html'\n    , json: 'application/json'\n    , urlencoded: 'application/x-www-form-urlencoded'\n  };","ctx":{"type":"property","receiver":"exports","name":"types","value":"{","string":"exports.types"}},{"tags":[],"description":{"full":"<p>Default serialization map.</p>","summary":"<p>Default serialization map.</p>","body":""},"ignore":false,"code":"exports.serialize = {\n       'application/x-www-form-urlencoded': serialize\n     , 'application/json': JSON.stringify\n   };","ctx":{"type":"property","receiver":"exports","name":"serialize","value":"{","string":"exports.serialize"}},{"tags":[],"description":{"full":"<p>Default parsers.</p>","summary":"<p>Default parsers.</p>","body":""},"ignore":false,"code":"exports.parse = {\n      'application/x-www-form-urlencoded': parseString\n    , 'application/json': JSON.parse\n  };","ctx":{"type":"property","receiver":"exports","name":"parse","value":"{","string":"exports.parse"}},{"tags":[{"type":"param","types":["String"],"name":"str","description":""},{"type":"return","types":["Object"],"description":""},{"type":"api","visibility":"private"}],"description":{"full":"<p>Parse the given header <code>str</code> into<br />an object containing the mapped fields.</p>","summary":"<p>Parse the given header <code>str</code> into<br />an object containing the mapped fields.</p>","body":""},"isPrivate":true,"ignore":false,"code":"function parseHeader(str) {\n    var lines = str.split(/\\r?\\n/)\n      , fields = {}\n      , index\n      , line\n      , field\n      , val;\n\n    lines.pop(); // trailing CRLF\n\n    for (var i = 0, len = lines.length; i < len; ++i) {\n      line = lines[i];\n      index = line.indexOf(':');\n      field = line.slice(0, index).toLowerCase();\n      val = line.slice(index + 1).trim();\n      fields[field] = val;\n    }\n\n    return fields;\n  }","ctx":{"type":"function","name":"parseHeader","string":"parseHeader()"}},{"tags":[{"type":"param","types":["XMLHTTPRequest"],"name":"xhr","description":""},{"type":"param","types":["Object"],"name":"options","description":""},{"type":"api","visibility":"private"}],"description":{"full":"<p>Initialize a new <code>Response</code> with the given <code>xhr</code>.</p>\n\n<ul>\n<li>set flags (.ok, .error, etc)</li>\n<li>parse header</li>\n</ul>","summary":"<p>Initialize a new <code>Response</code> with the given <code>xhr</code>.</p>","body":"<ul>\n<li>set flags (.ok, .error, etc)</li>\n<li>parse header</li>\n</ul>"},"isPrivate":true,"ignore":false,"code":"function Response(xhr, options) {\n    options = options || {};\n    this.xhr = xhr;\n    this.text = xhr.responseText;\n    this.setStatusProperties(xhr.status);\n    this.header = parseHeader(xhr.getAllResponseHeaders());\n    this.setHeaderProperties(this.header);\n    this.body = this.parseBody(this.text);\n  }","ctx":{"type":"function","name":"Response","string":"Response()"}},{"tags":[{"type":"param","types":["Object"],"name":"header","description":""},{"type":"api","visibility":"private"}],"description":{"full":"<h2>Set header related properties</h2>\n\n<ul>\n<li><code>.contentType</code> the content type without params</li>\n</ul>","summary":"<h2>Set header related properties</h2>","body":"<ul>\n<li><code>.contentType</code> the content type without params</li>\n</ul>"},"isPrivate":true,"ignore":false,"code":"Response.prototype.setHeaderProperties = function(header){\n    var params = (this.header['content-type'] || '').split(/ *; */);\n    this.contentType = params.shift();\n    this.setParams(params);\n  };","ctx":{"type":"method","constructor":"Response","name":"setHeaderProperties","string":"Response.prototype.setHeaderProperties()"}},{"tags":[{"type":"param","types":["Array"],"name":"params","description":""},{"type":"api","visibility":"private"}],"description":{"full":"<p>Create properties from <code>params</code>.</p>\n\n<p>For example \"Content-Type: text/plain; charset=utf-8\"<br />would pass an array of <code>[\"charset=utf-8\"]</code> to this<br />method, in turn defining the <code>.charset = \"utf-8\"</code> property.</p>","summary":"<p>Create properties from <code>params</code>.</p>","body":"<p>For example \"Content-Type: text/plain; charset=utf-8\"<br />would pass an array of <code>[\"charset=utf-8\"]</code> to this<br />method, in turn defining the <code>.charset = \"utf-8\"</code> property.</p>"},"isPrivate":true,"ignore":false,"code":"Response.prototype.setParams = function(params){\n    var param;\n    for (var i = 0, len = params.length; i < len; ++i) {\n      param = params[i].split(/ *= */);\n      this[param[0]] = param[1];\n    }\n  };","ctx":{"type":"method","constructor":"Response","name":"setParams","string":"Response.prototype.setParams()"}},{"tags":[{"type":"param","types":["String"],"name":"str","description":""},{"type":"return","types":["Mixed"],"description":""},{"type":"api","visibility":"private"}],"description":{"full":"<p>Parse the given body <code>str</code>.</p>","summary":"<p>Parse the given body <code>str</code>.</p>","body":""},"isPrivate":true,"ignore":false,"code":"Response.prototype.parseBody = function(str){\n    var parse = exports.parse[this.contentType];\n    return parse\n      ? parse(str)\n      : null;\n  };","ctx":{"type":"method","constructor":"Response","name":"parseBody","string":"Response.prototype.parseBody()"}},{"tags":[{"type":"param","types":["Number"],"name":"status","description":""},{"type":"api","visibility":"private"}],"description":{"full":"<p>Set flags such as <code>.ok</code> based on <code>status</code>.</p>","summary":"<p>Set flags such as <code>.ok</code> based on <code>status</code>.</p>","body":""},"isPrivate":true,"ignore":false,"code":"Response.prototype.setStatusProperties = function(status){\n    var type = status / 100 | 0;\n\n    // status / class\n    this.status = status;\n    this.statusType = type;\n\n    // basics\n    this.info = 1 == type;\n    this.ok = 2 == type;\n    this.clientError = 4 == type;\n    this.serverError = 5 == type;\n    this.error = 4 == type || 5 == type;\n\n    // sugar\n    this.noContent = 204 == status;\n    this.badRequest = 400 == status;\n    this.unauthorized = 401 == status;\n    this.notAcceptable = 406 == status;\n    this.notFound = 404 == status;\n  };","ctx":{"type":"method","constructor":"Response","name":"setStatusProperties","string":"Response.prototype.setStatusProperties()"}},{"tags":[],"description":{"full":"<p>Expose <code>Response</code>.</p>","summary":"<p>Expose <code>Response</code>.</p>","body":""},"ignore":false,"code":"exports.Response = Response;","ctx":{"type":"property","receiver":"exports","name":"Response","value":"Response","string":"exports.Response"}},{"tags":[{"type":"param","types":["String"],"name":"method","description":""},{"type":"param","types":["String"],"name":"url","description":""},{"type":"api","visibility":"public"}],"description":{"full":"<p>Initialize a new <code>Request</code> with the given <code>method</code> and <code>url</code>.</p>","summary":"<p>Initialize a new <code>Request</code> with the given <code>method</code> and <code>url</code>.</p>","body":""},"isPrivate":false,"ignore":false,"code":"function Request(method, url) {\n    var self = this;\n    EventEmitter.call(this);\n    this.method = method;\n    this.url = url;\n    this.header = {};\n    this.set('X-Requested-With', 'XMLHttpRequest');\n    this.on('end', function(){\n      self.callback(new Response(self.xhr));\n    });\n  }\n\n  Request.prototype = new EventEmitter;\n  Request.prototype.constructor = Request;","ctx":{"type":"function","name":"Request","string":"Request()"}},{"tags":[{"type":"param","types":["String"],"name":"field","description":""},{"type":"param","types":["String"],"name":"val","description":""},{"type":"return","types":["Request"],"description":"for chaining"},{"type":"api","visibility":"public"}],"description":{"full":"<p>Set header <code>field</code> to <code>val</code>.</p>","summary":"<p>Set header <code>field</code> to <code>val</code>.</p>","body":""},"isPrivate":false,"ignore":false,"code":"Request.prototype.set = function(field, val){\n    this.header[field.toLowerCase()] = val;\n    return this;\n  };","ctx":{"type":"method","constructor":"Request","name":"set","string":"Request.prototype.set()"}},{"tags":[{"type":"param","types":["String"],"name":"type","description":""},{"type":"return","types":["Request"],"description":"for chaining"},{"type":"api","visibility":"public"}],"description":{"full":"<p>Set Content-Type to <code>type</code>, mapping values from <code>exports.types</code>.</p>","summary":"<p>Set Content-Type to <code>type</code>, mapping values from <code>exports.types</code>.</p>","body":""},"isPrivate":false,"ignore":false,"code":"Request.prototype.type = function(type){\n    this.set('Content-Type', exports.types[type] || type);\n    return this;\n  };","ctx":{"type":"method","constructor":"Request","name":"type","string":"Request.prototype.type()"}},{"tags":[{"type":"param","types":["String","Object"],"name":"data","description":""},{"type":"return","types":["Request"],"description":"for chaining"},{"type":"api","visibility":"public"}],"description":{"full":"<p>Send <code>data</code>, defaulting the <code>.type()</code> to \"json\" when<br />an object is given.</p>","summary":"<p>Send <code>data</code>, defaulting the <code>.type()</code> to \"json\" when<br />an object is given.</p>","body":""},"isPrivate":false,"ignore":false,"code":"Request.prototype.data = function(data){\n    this._data = data;\n    if (isObject(data) && !this.header['content-type']) this.type('json');\n    return this;\n  };","ctx":{"type":"method","constructor":"Request","name":"data","string":"Request.prototype.data()"}},{"tags":[{"type":"param","types":["Object","String"],"name":"data","description":""},{"type":"param","types":["Function"],"name":"fn","description":""},{"type":"return","types":["Request"],"description":"for chaining"},{"type":"api","visibility":"public"}],"description":{"full":"<p>Send <code>.data()</code> and <code>.end()</code> with callback <code>fn</code>.</p>","summary":"<p>Send <code>.data()</code> and <code>.end()</code> with callback <code>fn</code>.</p>","body":""},"isPrivate":false,"ignore":false,"code":"Request.prototype.send = function(data, fn){\n    switch (arguments.length) {\n      case 2: return this.data(data).end(fn);\n      case 1: return this.end(data);\n      default: return this.end(noop);\n    }\n  };","ctx":{"type":"method","constructor":"Request","name":"send","string":"Request.prototype.send()"}},{"tags":[{"type":"param","types":["Function"],"name":"fn","description":""},{"type":"return","types":["Request"],"description":"for chaining"},{"type":"api","visibility":"public"}],"description":{"full":"<p>Initiate request, invoking callback <code>fn(res)</code><br />with an instanceof <code>Response</code>.</p>","summary":"<p>Initiate request, invoking callback <code>fn(res)</code><br />with an instanceof <code>Response</code>.</p>","body":""},"isPrivate":false,"ignore":false,"code":"Request.prototype.end = function(fn){\n    var self = this\n      , xhr = this.xhr = getXHR()\n      , data = this._data || null;\n\n    // store callback\n    this.callback = fn;\n\n    // initiate request\n    xhr.open(this.method, this.url, true);\n\n    // set header\n    for (var field in this.header) {\n      xhr.setRequestHeader(field, this.header[field], false);\n    }\n\n    // state change\n    xhr.onreadystatechange = function(){\n      if (4 == xhr.readyState) self.emit('end');\n    };\n\n    // serialize stuff\n    var serialize = exports.serialize[this.header['content-type']];\n    if (serialize) data = serialize(data);\n\n    // content-length\n    if (null != data && !this.header['content-length']) {\n      this.set('Content-Length', data.length);\n    }\n\n    // send stuff\n    xhr.send(data);\n    return this;\n  };","ctx":{"type":"method","constructor":"Request","name":"end","string":"Request.prototype.end()"}},{"tags":[],"description":{"full":"<p>Expose <code>Request</code>.</p>","summary":"<p>Expose <code>Request</code>.</p>","body":""},"ignore":false,"code":"exports.Request = Request;","ctx":{"type":"property","receiver":"exports","name":"Request","value":"Request","string":"exports.Request"}},{"tags":[{"type":"param","types":["String"],"name":"method","description":""},{"type":"param","types":["String"],"name":"url","description":""},{"type":"return","types":["Request"],"description":""},{"type":"api","visibility":"public"}],"description":{"full":"<p>Shortcut for <code>new Request(method, url)</code>.</p>","summary":"<p>Shortcut for <code>new Request(method, url)</code>.</p>","body":""},"isPrivate":false,"ignore":false,"code":"function request(method, url) {\n    return new Request(method, url);\n  }","ctx":{"type":"function","name":"request","string":"request()"}},{"tags":[{"type":"param","types":["String"],"name":"url","description":""},{"type":"param","types":["Function"],"name":"fn","description":""},{"type":"return","types":["Request"],"description":""},{"type":"api","visibility":"public"}],"description":{"full":"<p>GET <code>url</code> with optional callback <code>fn(res)</code>.</p>","summary":"<p>GET <code>url</code> with optional callback <code>fn(res)</code>.</p>","body":""},"isPrivate":false,"ignore":false,"code":"request.get = function(url, fn){\n    var req = request('GET', url);\n    if (fn) req.end(fn);\n    return req;\n  };","ctx":{"type":"method","receiver":"request","name":"get","string":"request.get()"}},{"tags":[{"type":"param","types":["String"],"name":"url","description":""},{"type":"param","types":["Function"],"name":"fn","description":""},{"type":"return","types":["Request"],"description":""},{"type":"api","visibility":"public"}],"description":{"full":"<p>DELETE <code>url</code> with optional callback <code>fn(res)</code>.</p>","summary":"<p>DELETE <code>url</code> with optional callback <code>fn(res)</code>.</p>","body":""},"isPrivate":false,"ignore":false,"code":"request.del = function(url, fn){\n    var req = request('DELETE', url);\n    if (fn) req.end(fn);\n    return req;\n  };","ctx":{"type":"method","receiver":"request","name":"del","string":"request.del()"}},{"tags":[{"type":"param","types":["String"],"name":"url","description":""},{"type":"param","types":["Mixed"],"name":"data","description":""},{"type":"param","types":["Function"],"name":"fn","description":""},{"type":"return","types":["Request"],"description":""},{"type":"api","visibility":"public"}],"description":{"full":"<p>POST <code>url</code> with optional <code>data</code> and callback <code>fn(res)</code>.</p>","summary":"<p>POST <code>url</code> with optional <code>data</code> and callback <code>fn(res)</code>.</p>","body":""},"isPrivate":false,"ignore":false,"code":"request.post = function(url, data, fn){\n    var req = request('POST', url);\n    if (data) req.data(data);\n    if (fn) req.end(fn);\n    return req;\n  };","ctx":{"type":"method","receiver":"request","name":"post","string":"request.post()"}},{"tags":[{"type":"param","types":["String"],"name":"url","description":""},{"type":"param","types":["Mixed"],"name":"data","description":""},{"type":"param","types":["Function"],"name":"fn","description":""},{"type":"return","types":["Request"],"description":""},{"type":"api","visibility":"public"}],"description":{"full":"<p>PUT <code>url</code> with optional <code>data</code> and callback <code>fn(res)</code>.</p>","summary":"<p>PUT <code>url</code> with optional <code>data</code> and callback <code>fn(res)</code>.</p>","body":""},"isPrivate":false,"ignore":false,"code":"request.put = function(url, data, fn){\n    var req = request('PUT', url);\n    if (data) req.data(data);\n    if (fn) req.end(fn);\n    return req;\n  };\n\n  return exports;\n  \n}({});","ctx":{"type":"method","receiver":"request","name":"put","string":"request.put()"}}]}